- name: Install PostgreSQL
  hosts: all
  become: true
  vars:
    postgres_version: 16
    postgres_password: "pass"

  handlers:
    - name: Restart postgresql
      ansible.builtin.service:
        name: postgresql
        state: restarted

  tasks:
    - name: Wait for the apt lock to be released
      ansible.builtin.shell: |
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
          sleep 1
        done
      changed_when: false

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - curl
          - wget
          - gnupg
          - lsb-release
          - apt-transport-https
          - software-properties-common
          - ca-certificates
          - python3-psycopg2
          - libpq-dev
        state: present

    - name: Add PostgreSQL signing key
      ansible.builtin.apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Wait for the apt lock to be released
      ansible.builtin.shell: |
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
          sleep 1
        done
      changed_when: false

    - name: Add PostgreSQL APT repository
      ansible.builtin.apt_repository:
        repo: "deb http://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main"
        state: present
        filename: "pgdg"

    - name: Wait for the apt lock to be released
      ansible.builtin.shell: |
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
          sleep 1
        done
      changed_when: false

    - name: Install PostgreSQL
      ansible.builtin.apt:
        name: "postgresql-{{ postgres_version }}"
        state: present
        update_cache: true

    - name: Ensure PostgreSQL is running
      ansible.builtin.service:
        name: postgresql
        state: started
        enabled: true

    - name: Create database and user
      ansible.builtin.shell: |
        sudo -u postgres psql -c "CREATE USER app_user WITH PASSWORD 'pass';"
        sudo -u postgres psql -c "CREATE DATABASE \"BrainRot\" WITH OWNER app_user;"
      changed_when: false

    - name: Run SQL to create tables
      ansible.builtin.shell: |
        psql -h localhost -U app_user -d BrainRot -f /home/ubuntu/sql/00init_script.sql
      environment:
        PGPASSWORD: "pass"
      args:
        executable: /bin/bash
      changed_when: false
      no_log: true

    - name: Grant privileges to app_user
      ansible.builtin.shell: |
        sudo -u postgres psql -d BrainRot <<EOF
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO app_user;
        GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO app_user;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO app_user;
        EOF
      changed_when: false

    - name: Run SQL to populate data
      ansible.builtin.shell: |
        psql -h localhost -U app_user -d BrainRot -f /home/ubuntu/sql/01populate_data.sql
      environment:
        PGPASSWORD: "pass"
      args:
        executable: /bin/bash
      changed_when: false
      no_log: true

    - name: Deploy custom configs
      ansible.builtin.copy:
        remote_src: true
        src: "/home/ubuntu/sql/{{ item }}"
        dest: "/etc/postgresql/{{ postgres_version }}/main/{{ item }}"
        owner: postgres
        group: postgres
        mode: '0640'
      loop:
        - postgresql.conf
        - pg_hba.conf
      notify: Restart postgresql
